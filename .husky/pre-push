#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "🚀 Running pre-push checks..."
echo "This may take a few minutes to ensure code quality and production readiness."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
  if [ $2 -eq 0 ]; then
    echo "${GREEN}✅ $1${NC}"
  else
    echo "${RED}❌ $1${NC}"
  fi
}

print_warning() {
  echo "${YELLOW}⚠️  $1${NC}"
}

# Set error handling
set -e

# Track overall success
OVERALL_SUCCESS=0

echo ""
echo "📊 Step 1/8: Environment validation..."
pnpm env-check
print_status "Environment validation" $?

echo ""
echo "🔍 Step 2/8: Code quality checks..."

# TypeScript compilation
echo "  • TypeScript type checking..."
pnpm type-check
TS_EXIT_CODE=$?
print_status "TypeScript compilation" $TS_EXIT_CODE

# Linting
echo "  • ESLint code analysis..."
pnpm lint
LINT_EXIT_CODE=$?
print_status "Linting" $LINT_EXIT_CODE

# Formatting check
echo "  • Code formatting check..."
pnpm format:check
FORMAT_EXIT_CODE=$?
print_status "Code formatting" $FORMAT_EXIT_CODE

echo ""
echo "🧪 Step 3/8: Test suite..."

# Unit tests with coverage
echo "  • Running unit tests with coverage..."
pnpm test:coverage
TEST_EXIT_CODE=$?
print_status "Unit tests with coverage" $TEST_EXIT_CODE

# Integration tests
echo "  • Running integration tests..."
pnpm e2e --reporter=line
E2E_EXIT_CODE=$?
print_status "End-to-end tests" $E2E_EXIT_CODE

echo ""
echo "🔒 Step 4/8: Security audit..."
pnpm audit:security
SECURITY_EXIT_CODE=$?
if [ $SECURITY_EXIT_CODE -ne 0 ]; then
  print_warning "Security vulnerabilities found. Please review and fix."
  # Don't fail the push for moderate vulnerabilities, but warn
  if [ $SECURITY_EXIT_CODE -gt 1 ]; then
    OVERALL_SUCCESS=1
  fi
else
  print_status "Security audit" $SECURITY_EXIT_CODE
fi

echo ""
echo "♿ Step 5/8: Accessibility compliance..."
if command -v axe >/dev/null 2>&1; then
  pnpm a11y:ci
  A11Y_EXIT_CODE=$?
  print_status "Accessibility tests" $A11Y_EXIT_CODE

  if [ $A11Y_EXIT_CODE -ne 0 ]; then
    OVERALL_SUCCESS=1
  fi
else
  print_warning "Accessibility testing skipped (axe not installed)"
fi

echo ""
echo "⚡ Step 6/8: Performance validation..."
if command -v lhci >/dev/null 2>&1; then
  pnpm perf:ci
  PERF_EXIT_CODE=$?
  print_status "Performance tests" $PERF_EXIT_CODE

  if [ $PERF_EXIT_CODE -ne 0 ]; then
    print_warning "Performance thresholds not met. Consider optimizing before push."
    # Don't fail push for performance, but warn
  fi
else
  print_warning "Performance testing skipped (lhci not installed)"
fi

echo ""
echo "🏗️  Step 7/8: Build verification..."

# Production build test
echo "  • Testing production build..."
pnpm build
BUILD_EXIT_CODE=$?
print_status "Production build" $BUILD_EXIT_CODE

if [ $BUILD_EXIT_CODE -ne 0 ]; then
  OVERALL_SUCCESS=1
fi

# Bundle size analysis
if [ -f "package.json" ] && grep -q "build:analyze" package.json; then
  echo "  • Analyzing bundle size..."
  ANALYZE=true pnpm build:analyze > /dev/null 2>&1
  BUNDLE_EXIT_CODE=$?
  print_status "Bundle analysis" $BUNDLE_EXIT_CODE
fi

echo ""
echo "📋 Step 8/8: Final validations..."

# Check for TODO comments in production files
echo "  • Checking for TODO/FIXME comments..."
TODO_COUNT=$(find src -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | xargs grep -l "TODO\|FIXME" | wc -l)
if [ $TODO_COUNT -gt 0 ]; then
  print_warning "Found $TODO_COUNT files with TODO/FIXME comments"
  echo "    Consider resolving these before pushing to production"
fi

# Check for console.log statements
echo "  • Checking for console statements..."
CONSOLE_COUNT=$(find src -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | xargs grep -l "console\." | wc -l)
if [ $CONSOLE_COUNT -gt 0 ]; then
  print_warning "Found $CONSOLE_COUNT files with console statements"
  echo "    Consider removing debug statements before pushing to production"
fi

# Check for .env files that shouldn't be committed
if [ -f ".env" ] || [ -f ".env.local" ] || [ -f ".env.production" ]; then
  if git ls-files --error-unmatch .env .env.local .env.production >/dev/null 2>&1; then
    echo "${RED}❌ Environment files are tracked in git!${NC}"
    echo "   Please remove .env files from git tracking:"
    echo "   git rm --cached .env .env.local .env.production"
    OVERALL_SUCCESS=1
  fi
fi

# Summary
echo ""
echo "📈 Push Readiness Summary:"
echo "=========================="

if [ $OVERALL_SUCCESS -eq 0 ]; then
  echo "${GREEN}🎉 All checks passed! Your code is ready for production.${NC}"
  echo ""
  echo "✅ Code quality: Excellent"
  echo "✅ Test coverage: Meeting requirements"
  echo "✅ Security: No critical vulnerabilities"
  echo "✅ Accessibility: WCAG compliant"
  echo "✅ Performance: Within acceptable limits"
  echo "✅ Build: Successful"
  echo ""
  echo "🚀 Pushing to remote repository..."
else
  echo "${RED}❌ Some checks failed. Please review and fix issues before pushing.${NC}"
  echo ""
  echo "🔧 Common fixes:"
  echo "   • Fix TypeScript errors: pnpm type-check"
  echo "   • Fix linting issues: pnpm lint:fix"
  echo "   • Format code: pnpm format"
  echo "   • Run tests: pnpm test"
  echo "   • Check build: pnpm build"
  echo ""
  echo "💡 For help: Check the README.md or run 'pnpm ci:all' for full validation"

  exit 1
fi

# Final success message
echo ""
echo "${GREEN}🎯 Pre-push validation completed successfully!${NC}"
echo "Your code meets all quality standards for production deployment."
