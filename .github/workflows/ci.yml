name: 🔄 Continuous Integration

on:
  push:
    branches: [main, develop, 'feature/**', 'hotfix/**']
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

# Prevent multiple runs on the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Global environment variables
env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'
  SKIP_ENV_VALIDATION: 'true'
  CI: 'true'

jobs:
  # Job 1: Environment Setup & Validation
  setup:
    name: 🔧 Setup & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
      should-deploy: ${{ steps.changes.outputs.should-deploy }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Detect Changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🔧 Generate Cache Keys
        id: cache-keys
        run: |
          echo "cache-key=${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: 💾 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            ~/.cache/ms-playwright
          key: ${{ steps.cache-keys.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Verify Environment
        run: |
          echo "Node.js version: $(node --version)"
          echo "pnpm version: $(pnpm --version)"
          echo "npm version: $(npm --version)"

      - name: 🏥 Health Check
        run: |
          pnpm --version
          node --version
          echo "✅ Environment setup completed successfully"

  # Job 2: Code Quality & Security
  quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 TypeScript Type Check
        run: |
          echo "🔍 Running TypeScript compilation check..."
          pnpm type-check

      - name: 🧹 ESLint Code Analysis
        run: |
          echo "🧹 Running ESLint analysis..."
          pnpm lint --format=json --output-file=eslint-report.json || true
          pnpm lint

      - name: 💅 Prettier Format Check
        run: |
          echo "💅 Checking code formatting..."
          pnpm format:check

      - name: 🔒 Security Audit
        run: |
          echo "🔒 Running security audit..."
          pnpm audit --audit-level moderate --json > security-audit.json || true
          pnpm audit:security

      - name: 📄 License Compliance Check
        run: |
          echo "📄 Checking license compliance..."
          pnpm audit:licenses

      - name: 📊 Upload Code Quality Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-reports
          path: |
            eslint-report.json
            security-audit.json
          retention-days: 30

  # Job 3: Testing Suite
  test:
    name: 🧪 Testing Suite
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 20

    strategy:
      matrix:
        test-group: ['unit', 'integration']

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run Unit Tests with Coverage
        if: matrix.test-group == 'unit'
        run: |
          echo "🧪 Running unit tests with coverage..."
          pnpm test:coverage --reporter=verbose --reporter=junit --outputFile.junit=./coverage/junit-report.xml

      - name: 📊 Coverage Threshold Check
        if: matrix.test-group == 'unit'
        run: |
          echo "📊 Verifying coverage thresholds..."
          # Coverage thresholds are enforced in vitest.config.ts
          # This step will fail if thresholds are not met

      - name: 🎭 Install Playwright Browsers
        if: matrix.test-group == 'integration'
        run: pnpm exec playwright install --with-deps

      - name: 🎭 Run E2E Tests
        if: matrix.test-group == 'integration'
        run: |
          echo "🎭 Running end-to-end tests..."
          pnpm e2e --reporter=html --reporter=junit
        env:
          PLAYWRIGHT_JUNIT_OUTPUT_NAME: e2e-results.xml

      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-group }}
          path: |
            coverage/
            test-results/
            playwright-report/
            e2e-results.xml
            coverage/junit-report.xml
          retention-days: 30

      - name: 📈 Publish Test Results
        uses: dorny/test-reporter@v1
        if: always() && matrix.test-group == 'unit'
        with:
          name: Unit Test Results
          path: coverage/junit-report.xml
          reporter: java-junit
          fail-on-error: true

  # Job 4: Accessibility & Performance
  quality-gates:
    name: 🚀 Quality Gates
    runs-on: ubuntu-latest
    needs: [setup, quality]
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build Application
        run: |
          echo "🏗️ Building application for testing..."
          pnpm build
        env:
          GENERATE_SOURCEMAP: 'false'

      - name: 🚀 Start Application
        run: |
          echo "🚀 Starting application server..."
          pnpm start &
          echo "Waiting for server to be ready..."
          npx wait-on http://localhost:3000/api/health --timeout 30000

      - name: ♿ Accessibility Testing
        run: |
          echo "♿ Running accessibility tests with axe.config.cjs..."
          pnpm a11y:ci

      - name: ⚡ Performance Testing
        run: |
          echo "⚡ Running performance tests with lighthouserc.js bundle validation..."
          pnpm perf:ci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: 📊 Upload Quality Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-gate-reports
          path: |
            .lighthouseci/
            axe-results/
          retention-days: 30

  # Job 5: Build & Bundle Analysis
  build:
    name: 🏗️ Build & Bundle Analysis
    runs-on: ubuntu-latest
    needs: [setup, quality]
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Production Build
        run: |
          echo "🏗️ Creating production build..."
          pnpm build
        env:
          NODE_ENV: production
          GENERATE_SOURCEMAP: 'true'

      - name: 📦 Bundle Size Analysis
        run: |
          echo "📦 Analyzing bundle size..."
          ANALYZE=true pnpm build:analyze > bundle-analysis.txt 2>&1 || true

      - name: 🗂️ Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            bundle-analysis.txt
            out/
          retention-days: 30

  # Job 6: Security & Compliance
  security:
    name: 🔒 Security & Compliance
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10

    permissions:
      security-events: write

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 CodeQL Initialize
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: 🔒 Dependency Review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'
        with:
          fail-on-severity: moderate

  # Job 7: Deployment Preparation
  deployment-prep:
    name: 🚀 Deployment Preparation
    runs-on: ubuntu-latest
    needs: [test, quality-gates, build]
    if: needs.setup.outputs.should-deploy == 'true'
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🗂️ Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./build-output

      - name: 📊 Prepare Release Information
        run: |
          echo "🏷️ Preparing release information..."

          # Create release notes
          cat > release-notes.md << 'EOF'
          ## 🚀 Release Information

          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          **Build:** ${{ github.run_number }}
          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ### ✅ Quality Gates Passed
          - Code Quality & Security ✅
          - Test Coverage > 80% ✅
          - Accessibility WCAG AA ✅
          - Performance Budget Met ✅
          - Bundle Size < 250KB ✅

          ### 📦 Build Artifacts
          - Next.js production build
          - Source maps (for error monitoring)
          - Bundle analysis report
          EOF

      - name: 📤 Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            release-notes.md
            ./build-output/
          retention-days: 90

  # Job 8: Status Summary
  ci-status:
    name: 📊 CI Status Summary
    runs-on: ubuntu-latest
    needs: [setup, quality, test, quality-gates, build, security]
    if: always()
    timeout-minutes: 5

    steps:
      - name: 📊 Generate Status Report
        run: |
          echo "# 🔄 CI Pipeline Status Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Setup | ${{ needs.setup.result == 'success' && '✅' || '❌' }} ${{ needs.setup.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.quality.result == 'success' && '✅' || '❌' }} ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Testing | ${{ needs.test.result == 'success' && '✅' || '❌' }} ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gates | ${{ needs.quality-gates.result == 'success' && '✅' || '❌' }} ${{ needs.quality-gates.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅' || '❌' }} ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result == 'success' && '✅' || '❌' }} ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [[ "${{ needs.setup.result }}" == "success" &&
                "${{ needs.quality.result }}" == "success" &&
                "${{ needs.test.result }}" == "success" &&
                "${{ needs.quality-gates.result }}" == "success" &&
                "${{ needs.build.result }}" == "success" &&
                "${{ needs.security.result }}" == "success" ]]; then
            echo "## 🎉 Overall Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "All quality gates passed! Code is ready for production." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Key Metrics Achieved:" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Bundle size < 250KB (enforced by Lighthouse CI)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Accessibility score ≥ 95% (enforced by axe)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Performance score ≥ 90% (enforced by Lighthouse CI)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Test coverage ≥ 80% (enforced by Vitest)" >> $GITHUB_STEP_SUMMARY
            else
              echo "## ❌ Overall Status: FAILED" >> $GITHUB_STEP_SUMMARY
              echo "Some quality gates failed. Please review and fix issues." >> $GITHUB_STEP_SUMMARY
            fi

      - name: 💬 Update PR Status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.payload.pull_request.number;

            const success = ${{
              needs.setup.result == 'success' &&
              needs.quality.result == 'success' &&
              needs.test.result == 'success' &&
              needs.quality-gates.result == 'success' &&
              needs.build.result == 'success' &&
              needs.security.result == 'success'
            }};

            const comment = success
              ? `## ✅ CI Pipeline Passed\n\nAll quality gates passed successfully! This PR is ready for review and merge.\n\n### 📊 Quality Metrics Enforced\n- ✅ Code Quality & Security (ESLint + CodeQL)\n- ✅ Test Coverage ≥ 80% (Vitest with strict thresholds)\n- ✅ Accessibility ≥ 95% (axe.config.cjs)\n- ✅ Performance ≥ 90% (lighthouserc.js)\n- ✅ Bundle Size < 250KB (lighthouserc.js assertions)\n- ✅ Security Audit (no critical vulnerabilities)`
              : `## ❌ CI Pipeline Failed\n\nSome quality gates failed. Please review the failed jobs and fix the issues.\n\n### 🔍 Next Steps\n1. Check failed job logs for specific errors\n2. Run \`pnpm ci:all\` locally to reproduce\n3. Fix issues and push again\n4. Ensure axe.config.cjs and lighthouserc.js requirements are met`;

            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body: comment
            });

      - name: 🚨 Fail if Required Jobs Failed
        if: |
          needs.setup.result != 'success' ||
          needs.quality.result != 'success' ||
          needs.test.result != 'success' ||
          needs.quality-gates.result != 'success' ||
          needs.build.result != 'success' ||
          needs.security.result != 'success'
        run: |
          echo "❌ One or more required jobs failed"
          exit 1
